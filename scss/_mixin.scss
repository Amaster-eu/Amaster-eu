@charset 'utf-8';
/* ==========================================================================
  Font Face
  Used: https://gist.github.com/jonathantneal/d0460e5c2d5d7f9bc5e6
  ========================================================================== */
@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
  $src: null;
  $extmods: (
    eot: "?",
    svg: "#" + str-replace($name, " ", "_")
  );
  $formats: (
    otf: "opentype",
    ttf: "truetype"
  );
  @each $ext in $exts {
    $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
    $src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
  }
  @font-face {
    font-family: quote($name);
    font-style: $style;
    font-weight: $weight;
    src: $src;
  }
}

// String Replace
@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  @return $string;
}

/*Strip the units from a value*/
@function strip-units($value) {
  @return $value / ($value * 0 + 1);
}

/*Calculate ems from a px value*/
@function em($px, $base-val: 16px) {
  @if not unitless($px) {
    $px: strip-units($px);
  }
  @if not unitless($base-val) {
    $base-val: strip-units($base-val);
  }
  @return ($px / $base-val) * 1em;
}


/*Clearfix*/
@mixin clearfix {
  &:before,
  &:after {
    display: table;
    content: "";
  }
  &:after {
    clear: both;
  }
}

/*Sizing*/
@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

/*Align the right way*/
@mixin align($horizontal: true, $vertical: true) {
  position: absolute;
  @if ($horizontal and $vertical) {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  } @else if ($horizontal) {
    left: 50%;
    transform: translate(-50%, 0);
  } @else if ($vertical) {
    top: 50%;
    transform: translate(0, -50%);
  }
}

@mixin visual-hide() {
  border: 0;
  clip: rect(0 0 0 0); height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

@mixin filter($opacity: 0.3, $background: #000) {
  &:before {
    position: absolute;
    left: 0;
    top: 0;
    height: 100%;
    width: 100%;
    display: block;
    content: " ";
    background: $background;
    opacity: $opacity;
    transition: opacity 0.3s ease;
  }
}



/* ==========================================================================
  Prefix mixins ++ My
  https://gist.github.com/juliocesar/8105794
  ========================================================================== */

@mixin prefix-background-size($parameters) {
  -webkit-background-size : $parameters;
  -moz-background-size    : $parameters;
  -o-background-size      : $parameters;
  background-size         : $parameters;
}
@mixin prefix-background-clip($parameters) {
  -webkit-background-clip : $parameters;
  -moz-background-clip    : $parameters;
  -ms-background-clip     : $parameters;
  background-clip         : $parameters;
}
@mixin prefix-transition($parameters...) {
  -webkit-transition : $parameters;
  -moz-transition    : $parameters;
  -ms-transition     : $parameters;
  transition         : $parameters;
}
@mixin prefix-perspective($parameters) {
  -webkit-perspective : $parameters;
  -moz-perspective    : $parameters;
  -ms-perspective     : $parameters;
  perspective         : $parameters;
}
@mixin prefix-transition-delay($parameters...) {
  -webkit-transition-delay : $parameters;
  -moz-transition-delay    : $parameters;
  -ms-transition-delay     : $parameters;
  transition-delay         : $parameters;
}
@mixin prefix-transform($parameters) {
  -webkit-transform : $parameters;
  -moz-transform    : $parameters;
  -ms-transform     : $parameters;
  transform         : $parameters;
}
@mixin prefix-transform-origin($parameters) {
  -webkit-transform-origin : $parameters;
  -moz-transform-origin    : $parameters;
  -ms-transform-origin     : $parameters;
  transform-origin         : $parameters;
}
@mixin prefix-transition-timing-function($parameters...) {
  -webkit--transition-timing-function : $parameters;
  -o-transition-timing-function       : $parameters;
  -moz-transition-timing-function     : $parameters;
  -ms-transition-timing-function      : $parameters;
  transition-timing-function          : $parameters;
}
@mixin prefix-animation($parameters) {
  -webkit-animation : $parameters;
  -moz-animation    : $parameters;
  -ms-animation     : $parameters;
  animation         : $parameters;
}
@mixin prefix-animation-delay($parameters) {
  -webkit-animation-delay : $parameters;
  -moz-animation-delay    : $parameters;
  -ms-animation-delay     : $parameters;
  animation-delay         : $parameters;
}
@mixin prefix-animation-fill-mode($parameters) {
  -webkit-animation-fill-mode : $parameters;
  -moz-animation-fill-mode    : $parameters;
  -ms-animation-fill-mode     : $parameters;
  animation-fill-mode         : $parameters;
}
@mixin prefix-animation-play-state($parameters) {
  -webkit-animation-play-state : $parameters;
  -moz-animation-play-state    : $parameters;
  -ms-animation-play-state     : $parameters;
  animation-play-state         : $parameters;
}
@mixin prefix-user-select($parameters) {
  -webkit-user-select : $parameters;
  -moz-user-select    : $parameters;
  user-select         : $parameters;
}
@mixin prefix-filter($parameters) {
  -webkit-filter : $parameters;
  -moz-filter    : $parameters;
  -ms-filter     : $parameters;
  filter         : $parameters;
}
@mixin prefix-box-sizing($parameters) {
  -webkit-box-sizing : $parameters;
  -moz-box-sizing    : $parameters;
  -ms-user-select    : $parameters;
  box-sizing         : $parameters;
}
@mixin prefix-backface-visibility($parameters) {
  -webkit-backface-visibility : $parameters;
  backface-visibility         : $parameters;
}
@mixin prefix-transform-style($parameters) {
  -webkit-transform-style : $parameters;
  transform-style         : $parameters;
}
@mixin prefix-transition-property($property...) {
    -moz-transition-property:    $property;
    -o-transition-property:      $property;
    -webkit-transition-property: $property;
    transition-property:         $property;
}
@mixin prefix-transition-duration($duration...) {
    -moz-transition-property:    $duration;
    -o-transition-property:      $duration;
    -webkit-transition-property: $duration;
    transition-property:         $duration;
}
@mixin prefix-column-width($parameters) {
    -moz-column-width:    $parameters;
    -o-column-width:      $parameters;
    -webkit-column-width: $parameters;
    column-width:         $parameters;
}
@mixin prefix-column-count($parameters) {
    -moz-column-count:    $parameters;
    -o-column-count:      $parameters;
    -webkit-column-count: $parameters;
    column-count:         $parameters;
}
@mixin prefix-column-gap($parameters) {
    -moz-column-gap:    $parameters;
    -o-column-gap:      $parameters;
    -webkit-column-gap: $parameters;
    column-gap:         $parameters;
}


/* ==========================================================================
  Flexbox Grid Mixins v.0.1.3
  GitHub: https://github.com/thingsym/flexbox-grid-mixins
  ========================================================================== */

/* ==========================================================================
  Flexbox Mixin
  GitHub: https://github.com/mastastealth/sass-flex-mixin
  ========================================================================== */
@mixin flexbox {
  display: -webkit-box;
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flexbox;
  display: flex;
}
%flexbox { @include flexbox; }
@mixin inline-flex {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -moz-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
}
%inline-flex { @include inline-flex; }

// Values: row | row-reverse | column | column-reverse
// Default: row
@mixin flex-direction($value: row) {
  @if $value == row-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: horizontal;
  } @else if $value == column {
    -webkit-box-direction: normal;
    -webkit-box-orient: vertical;
  } @else if $value == column-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: vertical;
  } @else {
    -webkit-box-direction: normal;
    -webkit-box-orient: horizontal;
  }
  -webkit-flex-direction: $value;
  -moz-flex-direction: $value;
  -ms-flex-direction: $value;
  flex-direction: $value;
}
  // Shorter version:
  @mixin flex-dir($args...) { @include flex-direction($args...); }

// Values: nowrap | wrap | wrap-reverse
// Default: nowrap
@mixin flex-wrap($value: nowrap) {
  // No Webkit Box fallback.
  -webkit-flex-wrap: $value;
  -moz-flex-wrap: $value;
  @if $value == nowrap {
    -ms-flex-wrap: none;
  } @else { 
    -ms-flex-wrap: $value; 
  }
  flex-wrap: $value;
}

// Values: <flex-direction> | <flex-wrap> 
// Default: row nowrap
@mixin flex-flow($values: (row nowrap)) {
  // No Webkit Box fallback.
  -webkit-flex-flow: $values;
  -moz-flex-flow: $values;
  -ms-flex-flow: $values;
  flex-flow: $values;
}

// Default: 0
@mixin order($int: 0) {
  -webkit-box-ordinal-group: $int + 1;
  -webkit-order: $int;
  -moz-order: $int;
  -ms-flex-order: $int;
  order: $int;
}

// Default: 0
@mixin flex-grow($int: 0) {
  -webkit-box-flex: $int;
  -webkit-flex-grow: $int;
  -moz-flex-grow: $int;
  -ms-flex-positive: $int;
  flex-grow: $int;
}

// Default: 1
@mixin flex-shrink($int: 1) {
  -webkit-flex-shrink: $int;
  -moz-flex-shrink: $int;
  -ms-flex-negative: $int;
  flex-shrink: $int;
}

// Values: Like "width" 
// Default: auto
@mixin flex-basis($value: auto) {
  -webkit-flex-basis: $value;
  -moz-flex-basis: $value;
  -ms-flex-preferred-size: $value;
  flex-basis: $value;
}

// Values: none | <flex-grow> <flex-shrink> || <flex-basis>
// Default: See individual properties (1 1 0).
@mixin flex($fg: 1, $fs: null, $fb: null) {
  // Set a variable to be used by box-flex properties
  $fg-boxflex: $fg;
  // Box-Flex only supports a flex-grow value so let's grab the
  // first item in the list and just return that.
  @if type-of($fg) == 'list' {
    $fg-boxflex: nth($fg, 1);
  }
  -webkit-box-flex: $fg-boxflex;
  -webkit-flex: $fg $fs $fb;
  -moz-box-flex: $fg-boxflex;
  -moz-flex: $fg $fs $fb;
  -ms-flex: $fg $fs $fb;
  flex: $fg $fs $fb;
}

// Values: flex-start | flex-end | center | space-between | space-around
// Default: flex-start
@mixin justify-content($value: flex-start) {
  @if $value == flex-start {
    -webkit-box-pack: start;
    -ms-flex-pack: start;
  } @else if $value == flex-end {
    -webkit-box-pack: end;
    -ms-flex-pack: end;
  } @else if $value == space-between {
    -webkit-box-pack: justify;
    -ms-flex-pack: justify;
  } @else if $value == space-around {
    -ms-flex-pack: distribute;    
  } @else {
    -webkit-box-pack: $value;
    -ms-flex-pack: $value;
  }
  -webkit-justify-content: $value;
  -moz-justify-content: $value;
  justify-content: $value;
}
  // Shorter version:
  @mixin flex-just($args...) { @include justify-content($args...); }

// Values: flex-start | flex-end | center | baseline | stretch
// Default: stretch
@mixin align-items($value: stretch) {
  @if $value == flex-start {
    -webkit-box-align: start;
    -ms-flex-align: start;
  } @else if $value == flex-end {
    -webkit-box-align: end;
    -ms-flex-align: end;
  } @else {
    -webkit-box-align: $value;
    -ms-flex-align: $value;
  }
  -webkit-align-items: $value;
  -moz-align-items: $value;
  align-items: $value;
}

// Values: auto | flex-start | flex-end | center | baseline | stretch
// Default: auto
@mixin align-self($value: auto) {
  // No Webkit Box Fallback.
  -webkit-align-self: $value;
  -moz-align-self: $value;
  @if $value == flex-start {
    -ms-flex-item-align: start;
  } @else if $value == flex-end {
    -ms-flex-item-align: end;
  } @else {
    -ms-flex-item-align: $value;
  }
  align-self: $value;
}

// Values: flex-start | flex-end | center | space-between | space-around | stretch
// Default: stretch
@mixin align-content($value: stretch) {
  // No Webkit Box Fallback.
  -webkit-align-content: $value;
  -moz-align-content: $value;
  @if $value == flex-start {
    -ms-flex-line-pack: start;
  } @else if $value == flex-end {
    -ms-flex-line-pack: end;
  } @else {
    -ms-flex-line-pack: $value;
  }
  align-content: $value;
}

